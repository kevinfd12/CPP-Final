/**
 Author: Kevin.diazgochez@baruchmail.cuny.edu
 my_id: 43824

 //my student id: 23643824 --- As you can see 8 is the largest digit
//Last Name = diazgochez
// I am using both of my last names with the space removed
//- 10 characters in my last name

//started exam at 9:26
//Closed exam at 11:20
 */

#include <iostream>
#include <string>

using namespace std;

/**
Basic Instructions:
--------------------
1) Many questions will refer to your last name and student ID.
2) You should consider the last name as it appears in registration records.
3) Unless otherwise stated, always assume all lower-case letters.
4) As far as student ID goes, it should be the ID in registration records.
5) Make sure this program runs properly and there are no syntax errors.
6) When modifying a function, DO NOT add any extra parameters
7) When modifying a function, you are free to define and use any variables/constants
8) When modifying a function, you are free to use any loops UNLESS told not to.
9) When modifying a function, you are free to use any if-else-elif statements,
   UNLESS told not to.
10) When modifying a function, you are free to use any of the other functions
	in this exam.

 */

 /**
 ------------------------------------------------------------------------------
 Question 1: Modify the function below so that it returns your last name.
 If your last name has any non-alpha symbols (e.g. hyphen, spaces), remove them.
 Example: The current function returns the value for the student named Jane Doe.
 ------------------------------------------------------------------------------
 */

string get_my_last_name() {
	string name = "diazgochez"; // must be lower-case
	return name;
}


/**
------------------------------------------------------------------------------
Question 2: Modify the function below so that it returns largest digit of
your student id. You do not have to do any fancy computation; simply
figure it out manually and hard-code the value.
Example: The current function returns the value for the student named Jane Doe
whose student ID is 45458212
------------------------------------------------------------------------------
 */
int get_my_largest_digit() {
	int digit = 8; // Jane hard-coded (i.e. directly wrote) her value.
	return digit;
}


/**
------------------------------------------------------------------------------
Question 3: Modify the function below such that the parameter has a default
value. That default value should be the number of alphabetic characters in
your last name.

Examples: For Jane Doe, num should have a default value of 3, thus
get_my_successor() should return 4

Other than that, the function should behave as it is:
get_my_successor(0) should return 1
get_my_successor(1) should return 2
get_my_successor(-1) should return 0, and so on...
------------------------------------------------------------------------------
 */
int get_my_successor(int num = 10) {
	int successor = num + 1;
	return successor;
}

/**
------------------------------------------------------------------------------
Question 4: The area of a square with a width of w is (w x w). The area of
n such squares is (n x w x w). Suppose that w is equal to the largest digit
in your student ID. Modify the function below such that it returns the area of
n squares with a width of w (w must be manually set within the function and
should not be made into an extra parameter). Do not add any additional
parameters to this function.

Examples: For Jane, with student ID of 45458212 (largest digit is 8):
get_area_of_my_squares(0) should return 0
get_area_of_my_squares(1) should return 64
get_area_of_my_squares(2) should return 128, and so on...
------------------------------------------------------------------------------
 */
int get_area_of_my_squares(int n) {
	int w = 8;
	int result = n * w * w;
	return result;
}


/**
------------------------------------------------------------------------------
Question 5: The following function takes a string parameter as input and
returns it back prefixed with a '('. Thus, calling it with 'hello' will return
'(hello' Modify the function such that it prefixes and postfixes with your
last name. Do not add any extra parameters to the function.

Examples: For Jane, this is the expected behavior:
get_my_modified_text('hello') should return 'doehellodoe'
get_my_modified_text('EYE') should return 'doeEYEdoe'

 Additional Note: The + operator can join two strings.
 e.g. string s1 = "Hello"; string s2 = " World"; string s3=s1+s2

------------------------------------------------------------------------------
 */
string get_my_modified_text(string text) {
	string modified_text = "diazgochez" + text + "diazgochez";
	return modified_text;
}


/**
------------------------------------------------------------------------------
Question 6: Modify the function such that it returns a string that repeats
the first letter of your last name followed by the largest digit in your
student ID, num times. Do not add any extra parameters to the function.

Example: For Jane, this is the expected behavior:
get_my_name_text(0) should return ''
get_my_name_text(1) should return 'd8'
get_my_name_text(5) should return 'd8d8d8d8d8'

Additional Note: The + operator can join two strings.
e.g. string s1 = "Hello"; string s2 = " World"; string s3=s1+s2
------------------------------------------------------------------------------
 */
string get_my_name_text(int num) {
	string result = "";
	for (int i = 0; i < num; i++) {
		result += "d8";

	}
	return result;
}

/**
------------------------------------------------------------------------------
Question 7: Modify the function such that:

 If the nums array has less than 3 elements the function returns -1

 otherwise:

 If the first element of the array is less than N, where N is the
 largest digit in your ID, then it returns the 2nd element, otherwise
 it returns the third element.

 The number of elements (arraySize) is the 2nd parameter. You may assume
 that the caller of the function will provide the accurate length. You
 may hard-code the value of N within the function. Do not add any additional
 parameters to the function.

 Example: If Jane has  arrays such as:
 int nums1[] = {7,10,20};
 int nums2[] = {8,10,20};
 int nums3[] = {2};

 then the function should behave in the following way:
 get_my_ternary(nums1,3) should return 10
 get_my_ternary(nums2,3) should return 20
 get_my_ternary(nums3,1) should return -1

------------------------------------------------------------------------------
 */
int get_my_ternary(int nums[], int arraySize) {
	int N = 8;
	if (arraySize < 3) {
		return -1;
	}
	else if (nums[0] < N) {
		int result = nums[1];
		return result;
	}
	else {
		int result = nums[2];
		return result;
	}

}

/**
------------------------------------------------------------------------------
Question 8: Modify the function below such that it returns the average of all
numbers between (N x a) and (N x b) (inclusive) where N is the largest digit
in your student id. You may assume a < b. Do not add any extra parameters to
the function.


Example: For Jane, this is the expected behavior (N=8 for Jane):
get_my_sequence_average(0,1) should return 4
Explanation: result is (8x0 + 8x1)/2 = 4

get_my_sequence_average(0,2) should return 8
Explanation: result is (8x0 + 8x1 + 8x2)/3 = 8

get_my_sequence_average(1,3) should return 8
Explanation: result is (8x1 + 8x2 + 8x3)/3 = 16

------------------------------------------------------------------------------
 */
double get_my_sequence_average(int a, int b) {
	int N = 8;
	int counter = 0;
	int strPrev = 0;
	for (int i = a; i <= b; i++) {
		int answer = (N * i);
		strPrev = strPrev + answer;
		counter++;

	}
	int answer = strPrev / counter;
	return answer;
}

/**
------------------------------------------------------------------------------
Question 9: Modify the function below such that it returns the count of numbers
between a and b (exclusive) that are divisible by the ASCII value of the first
letter of your last name (lower-case). By exclusive it is implied that a and b
will not be included. Do not add any extra parameters to the function.

Example: For Jane, this is the expected behavior (ASCII value of d is 100):
get_my_count(1,100) should return 0
Note: because none of the numbers in sequence: 2,3,...,99 are divisible by 100

get_my_count(1,150) should return 1
Note: within the sequence: 2, 3, ..., 149, the number 100 is divisible by 100.

get_my_count(1,1001) should return 10
100, 200, 300, ..., 1000 are the 10 numbers present in the sequence: 2,...,1000

------------------------------------------------------------------------------
 */
int get_my_count(int a, int b) {
	int count = 0;
	for (int i = a + 1; i < b; i++) {
		int n = 100;
		if (i % n == 0) {
			count++;
		}
	}
	return count;
}


/**
------------------------------------------------------------------------------
Question 10: Modify the function below such that it returns true only if all
the alphabetic (a-z) letters of your last name (in lower-case)  appears in
letters array.

 The number of elements (arraySize) is the 2nd parameter. You may assume
 that the caller of the function will provide the accurate length. If the
 arraySize is less than the number of letters in your name, you should return
 false.

 Example: If Jane has arrays such as:
 char letters1[] = {'x','o'};
 char letters2[] = {'e','v','o','l','v','e','d'};
 char letters3[] = {'c','+','+','1','2','!'};

 then the function should behave in the following way:
 get_my_name_array(letters1, 2) should return false
 get_my_name_array(letters2, 7) should return true (it has letters d, o, and e)
 get_my_name_array(letters3, 6) should return false

 };
------------------------------------------------------------------------------
 */
bool get_my_name_array(char letters[], int arraySize) {
	if (arraySize < 10) {
		return false;
	}
	else {
		int countd = 0;
		int counti = 0;
		int counta = 0;
		int countg = 0;
		int counto = 0;
		int countc = 0;
		int counth = 0;
		int counte = 0;
		int countz = 0;
		for (int i = 0; i < arraySize; i++) {
			if (letters[i] == 'd') {
				countd++;
			}
			else if (letters[i] == 'i') {
				counti++;
			}
			else if (letters[i] == 'a') {
				counta++;
			}

			else if (letters[i] == 'z') {
				countz++;
			}
			else if (letters[i] == 'g') {
				countg++;
			}
			else if (letters[i] == 'o') {
				counto++;
			}
			else if (letters[i] == 'c') {
				countc++;
			}
			else if (letters[i] == 'h') {
				counth++;
			}
			else if (letters[i] == 'e') {
				counte++;
			}
			else if (letters[i] == 'z') {
				countz++;
			}
		}
		if ((countd >= 1) && (counti >= 1) && (counta >= 1) && (countg >= 1) && (counto >= 1) && (countc >= 1) && (counth >= 1) && (counte >= 1) && (countz >= 2)) {
			return true;
		}
		else {
			return false;
		}
	}
}


/**
************************************************************************************************
I MADE CHANGES BELOW WHILE TESTING MY PROGRAM IN VISUAL STUDIO
MOSTLY TRYING TO GET SIMILAR ANSWERS TO JANE SINCE BOTH OUR LAST NAMES START WITH D AND OUR ID HIGHEST NUM IS 8
************************************************************************************************
------------------------------------------------------------------------------
Please make use of this function to test your answers.
 You are free to change this while you test your program
------------------------------------------------------------------------------
*/
void evaluate_my_exam() {

	cout << "Answer1: " << get_my_last_name() << endl;
	cout << "Answer2: " << get_my_largest_digit() << endl;

	//uncomment below, once question3 has been addressed...
	//cout << "Answer3.1: " << get_my_successor() << endl;


	cout << "Answer3.2: " << get_my_successor(-1) << endl;
	cout << "Answer4: " << get_area_of_my_squares(2) << endl;
	cout << "Answer5: " << get_my_modified_text("testing123") << endl;
	cout << "Answer6: " << get_my_name_text(5) << endl;

	// tests for question 7
	int nums1[] = { 7,10,20 };
	int nums2[] = { 8,10,20 };
	int nums3[] = { 2 };
	cout << "Answer7.1: " << get_my_ternary(nums1, 3) << endl;
	cout << "Answer7.2: " << get_my_ternary(nums2, 3) << endl;
	cout << "Answer7.3: " << get_my_ternary(nums3, 1) << endl;

	cout << "Answer8: " << get_my_sequence_average(1,3) << endl;
	cout << "Answer9: " << get_my_count(1, 150) << endl;

	// tests for question 10
	/*
	char letters1[] = { 'x','o' };
	char letters2[] = { 'e','v','o','l','v','e','d' };
	char letters3[] = { 'c','+','+','1','2','!' };
	*/

	char letters1[] = { 'i','a','z','g','o','c','h','e','z', 'a', 'c', 'v', 'b', 'e','q' }; //I left out a single d for testing reasons, and put an extra e. This should be false if my program works. 
	char letters2[] = { 'd','i','a','z','g','o','c','h','e','z' };
	char letters3[] = { 'i','a','z','g','o' };

	cout << "Answer10.1: " << get_my_name_array(letters1, 15) << endl;
	cout << "Answer10.2: " << get_my_name_array(letters2, 10) << endl;
	cout << "Answer10.3: " << get_my_name_array(letters3, 5) << endl;
}


/**
------------------------------------------------------------------------------
 You are free to change this while you test your program
------------------------------------------------------------------------------
*/
int main() {

	evaluate_my_exam();

	return 0;
}
